//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/AppControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AppControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AppControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AppControls"",
    ""maps"": [
        {
            ""name"": ""ActionMap"",
            ""id"": ""5a7bb439-5e91-4ccb-8470-6fabe3383609"",
            ""actions"": [
                {
                    ""name"": ""TouchClick"",
                    ""type"": ""Value"",
                    ""id"": ""c8eb31f4-ce74-4785-bcf5-a1962e30de25"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e74f439f-5573-4d21-b6a8-20efbdac8924"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""App control scheme"",
            ""bindingGroup"": ""App control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ActionMap
        m_ActionMap = asset.FindActionMap("ActionMap", throwIfNotFound: true);
        m_ActionMap_TouchClick = m_ActionMap.FindAction("TouchClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionMap
    private readonly InputActionMap m_ActionMap;
    private List<IActionMapActions> m_ActionMapActionsCallbackInterfaces = new List<IActionMapActions>();
    private readonly InputAction m_ActionMap_TouchClick;
    public struct ActionMapActions
    {
        private @AppControls m_Wrapper;
        public ActionMapActions(@AppControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchClick => m_Wrapper.m_ActionMap_TouchClick;
        public InputActionMap Get() { return m_Wrapper.m_ActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionMapActionsCallbackInterfaces.Add(instance);
            @TouchClick.started += instance.OnTouchClick;
            @TouchClick.performed += instance.OnTouchClick;
            @TouchClick.canceled += instance.OnTouchClick;
        }

        private void UnregisterCallbacks(IActionMapActions instance)
        {
            @TouchClick.started -= instance.OnTouchClick;
            @TouchClick.performed -= instance.OnTouchClick;
            @TouchClick.canceled -= instance.OnTouchClick;
        }

        public void RemoveCallbacks(IActionMapActions instance)
        {
            if (m_Wrapper.m_ActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionMapActions @ActionMap => new ActionMapActions(this);
    private int m_AppcontrolschemeSchemeIndex = -1;
    public InputControlScheme AppcontrolschemeScheme
    {
        get
        {
            if (m_AppcontrolschemeSchemeIndex == -1) m_AppcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("App control scheme");
            return asset.controlSchemes[m_AppcontrolschemeSchemeIndex];
        }
    }
    public interface IActionMapActions
    {
        void OnTouchClick(InputAction.CallbackContext context);
    }
}
